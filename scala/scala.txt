# 01 basic syntax

/* comments
*
*/

// comments

没有句末逗号

def main() {}

Array

String

scalac file.scala
scala ClassName

合法标识
  age
  _value
  __1_value
  $ 是保留关键字
  数字字母下划线

  操作符标识
    :::
    :>
    <?>
    :-> 内部表示为 $colon$minus$greater
  混合标识
    unary_+ 
    myvar_= 运算符重载
  标识符字面量
    `<click>` `yield`

package com.github.stuff

import scala.xml._

import scala.collection.mutable.{HashMap, List}

动态调用
  foo.field => foo.selectDynamic("filed")

# 02 data types

Byte 
Short 
Int 
Long 
Float 
Double 
Char

String: sequence of Chars
Unit: no value
Mull: empty reference
Nothing: subtype of any type
Any: supertype of any type
AnyRef: supertype of any reference type

Boolean Literals
  true false

Symbol Literals

'x 是 case class

package scals
final case class Symbol private (name: String) {
  override def toString: String = "'" + name
}

Character '\n'

String "Yep"

多行 """多行
文本
"""

scala.Null

# 03 variables

var someVar: String = "Foo" 可变声明

val someVal: String = "Bar" 不可变声明

val (valInt， valString) = Pair(40, "Speed")

# 04 class object

关键字 new 创建 objects

扩展类 extends

  override (subclass 继承 superclass, scala 只有单继承)

implicit class

Singleton Objects
  用关键字 object 声明，只有一个实例的 class
  无法继承或给 primary constructor 传参，例如 main 方法所在的 object

# 05 access modifiers

packages, classes, objects 成员可以标记访问权限。

默认为 public 
可用 label: private protected

private def f() { println("calling f method")}

package game {
  package player {
    class Score {
      private[player] var details = null
      private[game] var news = null
      private[this] var secrets = null

      def help(oldScore: Score) {
        // 可以访问 details
        // 无法使用 secrets 仅用于实例中 this
      }
    }
  }
}
# 01 basic syntax
# 01 basic syntax
# 01 basic syntax
# 01 basic syntax

akka



